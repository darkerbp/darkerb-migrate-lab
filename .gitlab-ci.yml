stages:
  - build
  - test
  - deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH && $CI_MERGE_REQUEST_TITLE =~ /^A6RC */

default:
  image: ubuntu:cicd

build-job:
  stage: build
  variables:
    VM_IPADDRESS: github.com
  before_script:
    - echo "The commit title is $CI_COMMIT_TITLE."
    - echo "The pipeline source is $CI_PIPELINE_SOURCE."
    - echo "The commit message is $CI_COMMIT_MESSAGE."
    - echo "target branch is $CI_MERGE_REQUEST_TARGET_BRANCH_NAME."
    - echo "$SSH_PRIVATE_KEY"
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $VM_IPADDRESS >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ls -la ~/.ssh

    - export
    - echo "end of the export"
    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## and email.
    ##
    - git config --global user.email "ruixiang.huang@aylaasia.com"
    - git config --global user.name "darkerb"
  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - ls -a
    - git clone git@github.com:darkerbp/Darkerb_Test_CICD.git sub_repo/Darkerb_Test_CICD
    - git submodule update --init --recursive
    - cd sub_repo/Darkerb_Test_CICD
    - ls -a
    - cd ../../
    - pwd
    - cd /
    - pwd

test-job1:
  stage: test
  script:
    - echo "This job tests something"

test-job2:
  stage: test
  script:
    - echo "This job tests something, but takes more time than test-job1."
    - echo "After the echo commands complete, it runs the sleep command for 20 seconds"
    - echo "which simulates a test that runs 20 seconds longer than test-job1"
    - sleep 20

deploy-prod:
  stage: deploy
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
